From d734dcdd3a3de0b654d695007c342aa0479257e0 Mon Sep 17 00:00:00 2001
From: Aart Bik <ajcbik@google.com>
Date: Thu, 20 Jul 2017 16:47:45 -0700
Subject: [PATCH] Assume all x86/x86_64 hosts support at least sse4.x/popcount.

Note: a small change with potentially big consequences
      please review carefully

Rationale:

Since all true Android x86/x86_64 devices and all x86/x86_64 hosts support
at least sse4.x/popcount, ideally we would simply drop support for
anything "lower". However, since the emulator running on x86/x86_64
only supports as much as the underlying host (a bad design to start
with!), we cannot do the full drop until emulator support includes
sse4.x/popcount.

This CL is the next best thing to get much more SIMD testing "out there"
It assumes that all x86/x86_64 hosts support at least sse4.x/popcount.
This firstly implies that the ART runtime binary itself may exploit
these features. Secondly, this implies thatthe ART runtime passes these
feature flags to dex2oat and JIT by calling the method
InstructionSetFeatures::FromCppDefines(). Since invoking dex2oat
directly does not pick up these flags, cross-compiling from a
x86/x86_64 host to a x86/x86_64 target should not be affected.

Bug: 63585550

Test: test-art-host and test-art-target (FUGU)

Change-Id: I93736cd7b781e4432f3cea036368e230af3d03d0
---
 build/Android.bp | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/build/Android.bp b/build/Android.bp
index 6e20e7b94b..7b807d56b7 100644
--- a/build/Android.bp
+++ b/build/Android.bp
@@ -140,6 +140,15 @@ art_global_defaults {
                 // Bug: 15446488. We don't omit the frame pointer to work around
                 // clang/libunwind bugs that cause SEGVs in run-test-004-ThreadStress.
                 "-fno-omit-frame-pointer",
+                // The build assumes that all our x86/x86_64 hosts (such as buildbots and developer
+                // desktops) support at least sse4.2/popcount. This firstly implies that the ART
+                // runtime binary itself may exploit these features. Secondly, this implies that
+                // the ART runtime passes these feature flags to dex2oat and JIT by calling the
+                // method InstructionSetFeatures::FromCppDefines(). Since invoking dex2oat directly
+                // does not pick up these flags, cross-compiling from a x86/x86_64 host to a
+                // x86/x86_64 target should not be affected.
+                "-msse4.2",
+                "-mpopcnt",
             ],
         },
     },
-- 
2.34.1

